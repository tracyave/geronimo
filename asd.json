//////////////////////CSS///////////////////////
*{
    font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    box-sizing:border-box;
    margin:0;
    padding:0;
}
html {
    background-color:cadetblue;
}
#container{
    display:flex;
    flex-direction: row;
}
#form{
    display: flex;
    flex-direction: column;
    text-align:center;
    border: 4px solid;
    border-color: forestgreen;
    background-color: antiquewhite;
    align-items: center
}
#inputData {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    width: 20%;
    text-align: center;
}
footer{
    color: gold;
    background-color: black;
    border-radius: 5px;
    padding: 3px;
    margin: 3px;
}
#orders {
    display: flex;
    flex-direction: column;
    width: 80%;
    overflow: scroll;
    overflow-x:hidden;
}
span{
    margin: 3px;
    background-color: cornflowerblue;
    margin-top: 10px;
    padding: 2px;
    width: 100%;
    font-weight: bold;
}
input{
    width: 95%;
    border-radius: 5px;
}
input[type="submit"]{
    font-size: 1.2em;
    margin: 5px;
    background-color: cadetblue;
    color: white;
    font-weight:bold;
}
input[type="submit"]:hover{
    background-color:aquamarine;
}
img{
    width: 100px;
    height: 100px;
}
.order{
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-between;
    border: solid 2px darkblue;
}
.order div{
    display: flex;
    align-items: center;
    height: 60%;
    margin: 2px;
    padding: 10px;
    font-size: 0.9em;
    word-wrap:break-word;
    background-color: lightskyblue;
    color: black;
    border: 2px solid black;
    border-radius: 3px;
}
#id{
    background-color: white !important;
    color: black !important;
}
.NeutralOrBadResponse {
    background-color: white !important;
    color: red;
    border: 2px solid black;
    font-size: 2em !important;
}
.goodResponse {
    background-color: white !important;
    color: limegreen !important;
    border: 2px solid black;
    font-size:2em !important;
}
.deleteButton{
    cursor: pointer;
    background-color: red !important;
    font-size: 1.3em !important;
    font-weight: bold !important;
}
.deleteButton:hover {
    background-color: azure !important;
    color: red;
    cursor:pointer;
}
.messages {
    border-radius: 5px;
    font-size: 1.1em;
    text-align: center;
    background-color: red;
}
.search {
    border-radius: 5px;
    font-size: 1.2em;
    text-align: center;
    background-color: white;
    padding: 2px;
    margin: 2px;
}
.addTitle{
    border-radius: 5px;
    font-size: 1.2em;
    text-align: center;
    background-color: forestgreen;
    padding: 5px;
    margin: 5px;
    color:white;
}
.editTitle {
    background-color: darkred !important;
    color: white !important;
}
.editButton {
    cursor: pointer;
    font-weight: bold;
    background-color: forestgreen !important;
    font-size: 1.3em !important;
}
.editButton:hover {
    background-color: white !important;
    color: forestgreen;
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
////////////////////////////////CONTROLLER////////////////////////////////////////
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System.Data;
using zh.Models;

namespace zh.Controllers
{
    [ApiController]
    public class OrderController : ControllerBase
    {

        // GET ALL ORDERS
        [HttpGet]
        [Route ("orders/")]
        public IActionResult getAcc()
        {
            Models.Zh3Context context = new Models.Zh3Context();
            var accs = from x in context.Orders
                       select x;
            return new JsonResult(accs);
        }

        // GET ORDER BY ID
        [HttpGet]
        [Route ("orders/{id}")]
        public IActionResult getAccByOrderId(int id) {
            Models.Zh3Context context = new Models.Zh3Context();
            var order = from x in context.Orders
                      where x.OrderId ==  id
                      select x;
            if(order == null)
            {
                return BadRequest("Nincs ilyen sorszámú rendelés!");
            }
            return new JsonResult(order.FirstOrDefault());
        }

        // DELETE ORDER
        [HttpDelete]
        [Route ("orders/{id}")]
        public IActionResult deleteAcc(int id)
        {
            Models.Zh3Context context = new Models.Zh3Context();
            var order = from x in context.Orders
                       where x.OrderId == id
                       select x;
            if(order == null)
            {
                return BadRequest("Nincs ilyen sorszámú rendelés!");
            }
            context.Orders.Remove(order.FirstOrDefault())  ;
            context.SaveChanges();
            return Ok("Order deleted!");
        }

        // POST NEW ORDER

        [HttpPost]
        [Route ("orders/")]
        public IActionResult addNewAcc([FromBody] Order newOrder)
        {
            Models.Zh3Context context = new Models.Zh3Context();
            context.Orders.Add(newOrder);
            context.SaveChanges();
            return Ok("Order added!");
        }

        // UPDATE ORDER

        [HttpPut]
        [Route ("orders/{id}")]
        public IActionResult updateOrder(int id, [FromBody] Models.Order updatedOrder)
        {
            Models.Zh3Context context = new Models.Zh3Context();
            var order = (from x in context.Orders
                        where x.OrderId == id
                        select x).FirstOrDefault();
            if(order == null) return BadRequest("Order not found!");
           
            order.OrderId = updatedOrder.OrderId;
            order.FullName= updatedOrder.FullName;
            order.Avatar = updatedOrder.Avatar;
            order.Email = updatedOrder.Email;
            order.Country = updatedOrder.Country;
            order.Address = updatedOrder.Address;
            order.Date= updatedOrder.Date;
            order.Creditcard= updatedOrder.Creditcard;
            order.Amount= updatedOrder.Amount;

            try
            {
            context.SaveChanges();

            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }
            return Ok("Order updated!");
        }
    }
}
//////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////
////////////////////////////////////JS///////////////////////////////////
const orders = document.getElementById("orders");
const form = document.getElementById("form");
const search = document.getElementById("search");
const submitButton = document.getElementById("submit");
const inputArea = document.getElementById("inputData");
const addOrEditTitle = document.querySelector(".addTitle");
const idInput = document.getElementById("idInput");
const temp = document.getElementById("temp");
let deleteButtons;
let editButtons;

const state = {
    method: "POST",
    currentOrderIdToEdit: ""
}

orders.innerHTML = `<p class="messages NeutralOrBadResponse">Adatok betöltése...</p>`;
orders.style.height = `${window.innerHeight}px`;
inputArea.style.height = `${window.innerHeight}px`;



const options = {
    method: 'GET',
    headers: {
        'X-RapidAPI-Key': 'cc9106ea90mshb29b84cf4bee4a2p17e40fjsna0e04c11167b',
        'X-RapidAPI-Host': 'weatherbit-v1-mashape.p.rapidapi.com'
    }
};
const weatherDisplay = async function () {
    const res = await fetch('https://weatherbit-v1-mashape.p.rapidapi.com/current?lon=19.040236&lat=47.497913&units=metric&lang=hu', options)
    const data = await res.json();
    temp.innerHTML = `${data.data[0].app_temp}°C <br> ${data.data[0].weather.description} <br> Napkelte: ${data.data[0].sunrise} <br> Napnyugta: ${data.data[0].sunset}`;
}


const loadOrders = async function () {
    const res = await fetch(`orders/`);
    const data = await res.json();
    if (!res.ok) {
        orders.innerHTML = res.status;
        return;
    }
    render(data);
}

const loadOrdersById = async function (id) {
    if (!id) {
        loadOrders();
        return;
    }
    if (isNaN(id)) {
        orders.innerHTML = `<p class="messages NeutralOrBadResponse">Érvénytelen id (${id}).</p>`;
        return
    }

    const res = await fetch(`orders/${id}`);
    const data = await res.json();
    if (!data) {
        orders.innerHTML = `<p class="messages NeutralOrBadResponse">Rendelés nem található ${id} id-vel.</p>`;
        return;
    }
    render([data]);
}

const render = function (data) {
    let markup = CreateMarkup(data);
    orders.innerHTML = "";
    orders.insertAdjacentHTML('afterbegin', markup);
    deleteButtons = document.querySelectorAll(".deleteButton");
    editButtons = document.querySelectorAll(".editButton");

    addEventListenersEditDelete(editButtons, deleteButtons);
    return;
}

const addEventListenersEditDelete = function (editButtons, deleteButtons) {
    for (let button of deleteButtons) {
        button.onclick = function (event) {
            orders.innerHTML = `<p class="messages NeutralOrBadResponse">Rendelés törlése...</p>`;
            deleteOrder(event.target.parentElement.id);
        }
    }

    for (let button of editButtons) {
        button.onclick = function (event) {
            state.method = "PUT";
            state.currentOrderIdToEdit = button.parentElement.id;
            addOrEditTitle.innerHTML = `Rendelés szerkesztése`;
            addOrEditTitle.classList.add("editTitle");
            form.style.borderColor = "darkred";
            idInput.value = button.parentElement.id;
        }
    }
    return
}


const deleteOrder = async function (id) {
    const req = await fetch(`orders/${id}`, { method: 'DELETE' })
    if (req.status === 200) {
        orders.innerHTML = `<p class="messages goodResponse">Rendelés törölve!</p>`
        search.value = "";
        setTimeout(loadOrders, 3000);
        return;
    }
    orders.innerHTML = `<p class="messages NeutralOrBadResponse">Rendelés törlése nem sikerült :( ${req.status}:${req.statusText}</p>`;
    return;
}


const submitOrder = async function (event, method = "POST", id = "") {
    event.preventDefault();
    const avatarReq = await fetch(`https://robohash.org/${event.target.fullName.value}.png?size=100x100&set=set5`);

    const regex = new RegExp("\\b([1-9]|[1-9][0-9]|100)\\b", 'g')
    if (!regex.test(event.target.idInput.value)) {
        orders.innerHTML = `<p class="messages NeutralOrBadResponse">Rendelés ID csak szám lehet 1 és 100 között!</p>`;
        setTimeout(loadOrders, 2000);
        return;
    }

    let order = {
        orderId: event.target.idInput.value,
        fullName: event.target.fullName.value,
        avatar: avatarReq.url,
        email: event.target.email.value,
        country: event.target.country.value,
        address: event.target.address.value,
        date: event.target.date.value,
        creditcard: event.target.creditcard.value,
        amount: event.target.amount.value
    }
    try {
        const PostRes = await fetch(`orders/${id}`, {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(order)
        })
        console.log(PostRes);
        if (PostRes.status === 200) {
            orders.innerHTML = `<p class="messages goodResponse">Rendelés ${state.method === "POST" ? "felvétele" : "szerkesztése"} sikeres!</p>`;
            setTimeout(loadOrders, 3000);
            event.target.idInput.value = "";
            event.target.fullName.value = "";
            event.target.email.value = "";
            event.target.country.value = "";
            event.target.address.value = "";
            event.target.date.value = "";
            event.target.creditcard.value = "";
            event.target.amount.value = "";
        }
        
    }
    catch (error)
    {
        orders.innerHTML = `<p class="messages NeutralOrBadResponse">Rendelés felvétele nem sikerült :( ${error}</p>`;
        setTimeout(loadOrders, 3000);

        return;
    }
    SetDefaultValues();
    loadOrders();
    return;
};

const SetDefaultValues = function() {
    state.method = "POST";
    state.currentOrderIdToEdit = "";
    addOrEditTitle.innerHTML = "Rendelés hozzáadása";
    addOrEditTitle.classList.remove("editTitle");
    form.style.borderColor = "forestgreen";
    idInput.value = "";
    search.value = "";
}

const CreateMarkup = function(data) {
    let markup = ``;
    for (let order of data) {
        markup += `<div class="order" id="${order.orderId}">
                      <div>${order.orderId}</div>
                      <img src="${order.avatar}" class="avatar"/>
                      <div class="fullName">${order.fullName}</div>
                      <div class="email">${order.email}</div>
                      <div class="country">${order.country}</div>
                      <div class="address">${order.address}</div>
                      <div class="date">${order.date}</div>
                      <div class="creditcart">${order.creditcard}</div>
                      <div class="amount">${order.amount}</div>
                      <div class="editButton">Szerkesztés</div>
                      <div class="deleteButton">Törlés</div>
                    </div>`;
    }
    return markup;
}

window.onload = loadOrders();
window.onload = weatherDisplay();
search.onkeyup = function () {
   loadOrdersById(search.value)
}
form.onsubmit = function (event) {
    submitOrder(event, state.method, state.currentOrderIdToEdit);
}


